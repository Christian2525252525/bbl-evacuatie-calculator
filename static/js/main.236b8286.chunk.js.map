{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["EvacuationCalculator","numberOfStairs","setNumberOfStairs","useState","numberOfFloors","setNumberOfFloors","lowestFloor","setLowestFloor","hasVestibules","setHasVestibules","evacuationTimeMinutes","setEvacuationTimeMinutes","peoplePerFloor","setPeoplePerFloor","timeStepSize","setTimeStepSize","stairsData","setStairsData","floorsHeight","setFloorsHeight","floorExitFlowRate","setFloorExitFlowRate","stairFlowRate","setStairFlowRate","vestibuleFlowReduction","setVestibuleFlowReduction","calculationResults","setCalculationResults","totalEvacuationTime","setTotalEvacuationTime","showResults","setShowResults","showAdvancedSettings","setShowAdvancedSettings","floors","setFloors","useEffect","newStairsData","i","push","id","name","String","fromCharCode","width","freeWidth","hasLandings","landingsPerFloor","landingSize","flowCapacity","resistance","exitDoorWidth","hasVestibule","vestibuleDepth","vestibuleDoorWidth","specificTravelDistances","travelDistanceFloor","travelSpeed","floorEvacuationDelay","capacityReduction","minWidth","receiveCapacity","floorArray","peopleObj","forEach","floor","prevStairsData","map","stair","travelDistances","handleStairDataChange","stairId","property","value","updatedStairsData","stairIndex","findIndex","includes","parseFloat","startsWith","floorNumber","parseInt","split","[object Object]","calculateStairFlowCapacity","Math","min","max","calculateFloorExitCapacity","capacity","calculateTravelTime","calculateStairDescentTime","fromFloor","toFloor","floorsToDescend","React","createElement","className","totalPeople","totalHeight","toFixed","stairCapacity","exitDoorCapacity","ResponsiveContainer","height","LineChart","data","timeSeriesData","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","label","position","offset","YAxis","angle","Tooltip","Legend","Line","key","type","stroke","strokeWidth","criticalPaths","path","index","travelTime","descentTime","totalTime","BarChart","floorData","layout","Bar","fill","people","evacuationStartTime","remainingAtEnd","onClick","resetCalculation","window","print","onChange","e","target","step","toString","disabled","length","handlePeopleChange","calculateEvacuation","Object","values","reduce","sum","count","abs","stairs","timeStep","maxTimeSeconds","totalTimeSteps","ceil","simulationData","timeSteps","stairData","evacuationProgress","totalEvacuated","originalPeople","remainingPeople","evacuationDelay","exitCapacity","peopleOnStair","currentTime","timeStepData","time","timeMinutes","remainingInBuilding","stairState","exitCapacityThisStep","exitingThisStep","floorState","attemptingToExit","stairFillFactor","actuallyExiting","evacuationTimeStep","find","calculatedEvacuationTime","totalStairCapacity","totalExitDoorCapacity","filter","_","dataPoint","round","total","slowestPathTime","slowestStair","totalPathTime","detailedTimeSteps","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.236b8286.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\n\nconst EvacuationCalculator = () => {\n  // Basis gebouwparameters\n  const [numberOfStairs, setNumberOfStairs] = useState(5);\n  const [numberOfFloors, setNumberOfFloors] = useState(5);\n  const [lowestFloor, setLowestFloor] = useState(-1);\n  const [hasVestibules, setHasVestibules] = useState(true);\n  const [evacuationTimeMinutes, setEvacuationTimeMinutes] = useState(20);\n  const [peoplePerFloor, setPeoplePerFloor] = useState({});\n  const [timeStepSize, setTimeStepSize] = useState(30); // standaard 30 seconden per tijdstap\n  \n  // Uitgebreide parameters\n  const [stairsData, setStairsData] = useState([]);\n  const [floorsHeight, setFloorsHeight] = useState(3); // Standaard verdiepingshoogte in meters\n  const [floorExitFlowRate, setFloorExitFlowRate] = useState(45); // Personen per minuut per meter breedte\n  const [stairFlowRate, setStairFlowRate] = useState(33); // Personen per minuut per meter breedte voor trappen\n  const [vestibuleFlowReduction, setVestibuleFlowReduction] = useState(0.85); // Vermindering door voorportalen (factor)\n  \n  // Results\n  const [calculationResults, setCalculationResults] = useState(null);\n  const [totalEvacuationTime, setTotalEvacuationTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\n  \n  // Floors state to manage dynamic inputs for people per floor\n  const [floors, setFloors] = useState([]);\n  \n  // Initialize stair data when number of stairs changes\n  useEffect(() => {\n    const newStairsData = [];\n    for (let i = 0; i < numberOfStairs; i++) {\n      newStairsData.push({\n        id: i + 1,\n        name: String.fromCharCode(65 + i), // A, B, C, D, E...\n        width: 1.2, // Standaard trapbreedte in meters\n        freeWidth: 1.0, // Vrije breedte in meters\n        hasLandings: true,\n        landingsPerFloor: 2, // Standaard 2 bordessen per verdieping\n        landingSize: 1.5, // Standaard bordesgrootte in meters\n        flowCapacity: 33, // Standaard doorstroomcapaciteit pers/min\n        resistance: 1.0, // Weerstandsfactor\n        exitDoorWidth: 0.85, // Breedte van de uitgang in meters\n        hasVestibule: hasVestibules, // Voorportaal aanwezig\n        vestibuleDepth: 1.5, // Diepte van voorportaal in meters\n        vestibuleDoorWidth: 0.85, // Breedte van deur in voorportaal\n        specificTravelDistances: {}, // Specifieke loopafstanden per verdieping\n        travelDistanceFloor: 15, // Standaard loopafstand per verdieping in meters\n        travelSpeed: 1.6, // Loopsnelheid in meters per seconde\n        floorEvacuationDelay: 60, // Vertraging in seconden voordat evacuatie op een verdieping begint\n        // Extra parameters uit de Excel-sheet\n        capacityReduction: 1.0, // Vermindering doorstroomcapaciteit (factor)\n        minWidth: 0.85, // Minimale breedte\n        receiveCapacity: 120, // Opvangcapaciteit personen\n      });\n    }\n    setStairsData(newStairsData);\n  }, [numberOfStairs, hasVestibules]);\n  \n  // Update floors array when parameters change\n  useEffect(() => {\n    const floorArray = [];\n    for (let i = numberOfFloors - 1; i >= lowestFloor; i--) {\n      floorArray.push(i);\n    }\n    setFloors(floorArray);\n    \n    // Initialize peoplePerFloor object\n    const peopleObj = {};\n    floorArray.forEach(floor => {\n      peopleObj[floor] = peoplePerFloor[floor] || 100; // Default 100 people per floor\n    });\n    setPeoplePerFloor(peopleObj);\n    \n    // Update specificTravelDistances voor alle trappen\n    setStairsData(prevStairsData => {\n      return prevStairsData.map(stair => {\n        const travelDistances = {...stair.specificTravelDistances};\n        floorArray.forEach(floor => {\n          if (!travelDistances[floor]) {\n            travelDistances[floor] = stair.travelDistanceFloor;\n          }\n        });\n        return {...stair, specificTravelDistances: travelDistances};\n      });\n    });\n  }, [numberOfFloors, lowestFloor]);\n  \n  // Handle change in people count for a specific floor\n  const handlePeopleChange = (floor, value) => {\n    setPeoplePerFloor({\n      ...peoplePerFloor,\n      [floor]: parseInt(value) || 0\n    });\n  };\n  \n  // Handle change in stair data\n  const handleStairDataChange = (stairId, property, value) => {\n    const updatedStairsData = [...stairsData];\n    const stairIndex = updatedStairsData.findIndex(stair => stair.id === stairId);\n    \n    if (stairIndex !== -1) {\n      // Voor numerieke waarden, zorg ervoor dat ze worden geconverteerd naar nummers\n      if ([\n        'width', 'freeWidth', 'landingSize', 'flowCapacity', 'resistance', \n        'exitDoorWidth', 'vestibuleDepth', 'vestibuleDoorWidth', 'landingsPerFloor',\n        'travelDistanceFloor', 'travelSpeed', 'floorEvacuationDelay',\n        'capacityReduction', 'minWidth', 'receiveCapacity'\n      ].includes(property)) {\n        value = parseFloat(value) || 0;\n      }\n      \n      // Voor boolean waarden\n      if (['hasLandings', 'hasVestibule'].includes(property)) {\n        value = value === 'true';\n      }\n      \n      // Voor specifieke vloer loopafstanden\n      if (property.startsWith('travelDistance_')) {\n        const floorNumber = parseInt(property.split('_')[1]);\n        const specificTravelDistances = {\n          ...updatedStairsData[stairIndex].specificTravelDistances,\n          [floorNumber]: parseFloat(value) || 0\n        };\n        updatedStairsData[stairIndex] = {\n          ...updatedStairsData[stairIndex],\n          specificTravelDistances\n        };\n      } else {\n        updatedStairsData[stairIndex] = {\n          ...updatedStairsData[stairIndex],\n          [property]: value\n        };\n      }\n      \n      setStairsData(updatedStairsData);\n    }\n  };\n  \n  // Bereken de doorstroomcapaciteit van een trap per minuut\n  const calculateStairFlowCapacity = (stair) => {\n    // Basis doorstroomcapaciteit op basis van breedte\n    const baseCapacity = stair.width * stairFlowRate;\n    \n    // Correctie voor vrije breedte\n    const freeWidthFactor = Math.min(1, stair.freeWidth / stair.width);\n    \n    // Correctie voor bordessen\n    const landingFactor = stair.hasLandings ? \n      Math.max(0.6, Math.min(1, stair.landingSize / 2)) : 1;\n    \n    // Correctie voor voorportalen\n    const vestibuleFactor = stair.hasVestibule ? vestibuleFlowReduction : 1;\n    \n    // Extra correctiefactor uit het model\n    const capacityReductionFactor = stair.capacityReduction;\n    \n    // Totale capaciteit na correcties\n    return baseCapacity * freeWidthFactor * landingFactor * vestibuleFactor * capacityReductionFactor;\n  };\n  \n  // Bereken de uitstroomcapaciteit van een verdieping naar een trap\n  const calculateFloorExitCapacity = (stair, floor) => {\n    // De uitstroomcapaciteit is bepaald door de doorgang naar de trap\n    let capacity;\n    \n    if (stair.hasVestibule) {\n      // Doorgang beperkt door voorportaaldeur\n      capacity = stair.vestibuleDoorWidth * floorExitFlowRate * vestibuleFlowReduction;\n    } else {\n      // Directe doorgang naar trap\n      capacity = stair.width * floorExitFlowRate;\n    }\n    \n    // Specifieke beperkingen per verdieping kunnen hier worden toegevoegd\n    \n    return capacity;\n  };\n  \n  // Bereken de looptijd van een punt op een verdieping naar een trap\n  const calculateTravelTime = (stair, floor) => {\n    // Gebruik de specifieke loopafstand voor deze verdieping en trap indien beschikbaar\n    const travelDistance = stair.specificTravelDistances[floor] || stair.travelDistanceFloor;\n    \n    // Looptijd = afstand / snelheid (in seconden)\n    return travelDistance / stair.travelSpeed;\n  };\n  \n  // Bereken de tijd die het kost om een trap af te dalen\n  const calculateStairDescentTime = (stair, fromFloor, toFloor) => {\n    const floorsToDescend = fromFloor - toFloor;\n    if (floorsToDescend <= 0) return 0;\n    \n    // Gemiddelde tijd om één verdieping af te dalen (seconden)\n    const timePerFloor = 30; // Dit is een benadering, moet worden aangepast aan werkelijke waardes\n    \n    // Extra tijd voor bordessen\n    const landingDelay = stair.hasLandings ? stair.landingsPerFloor * 2 : 0; // 2 seconden per bordes\n    \n    // Totale tijd voor afdaling\n    return floorsToDescend * (timePerFloor + landingDelay);\n  };\n  \n  // Implementeer een meer gedetailleerde, tijdstap-gebaseerde simulatie van evacuatie\n  const calculateEvacuation = () => {\n    // Bereken het totaal aantal personen in het gebouw\n    const totalPeople = Object.values(peoplePerFloor).reduce((sum, count) => sum + count, 0);\n    \n    // Bereken de totale hoogte van het gebouw\n    const totalHeight = (numberOfFloors - 1 + Math.abs(Math.min(0, lowestFloor))) * floorsHeight;\n    \n    // Maak een kopie van stairsData voor de berekening\n    const stairs = [...stairsData];\n    \n    // Definieer de tijdstap in seconden\n    const timeStep = timeStepSize; // Bijvoorbeeld 30 seconden per stap\n    \n    // Bereken de maximum tijd in seconden (omzetten van minuten)\n    const maxTimeSeconds = evacuationTimeMinutes * 60;\n    \n    // Bepaal hoeveel tijdstappen we nodig hebben (met een buffer van 2x)\n    const totalTimeSteps = Math.ceil((maxTimeSeconds * 2) / timeStep);\n    \n    // Initialiseer de simulatiegegevens\n    const simulationData = {\n      timeSteps: [],\n      floorData: {},\n      stairData: {},\n      evacuationProgress: [],\n      totalEvacuated: 0\n    };\n    \n    // Initialiseer de status voor elke verdieping en trap\n    floors.forEach(floor => {\n      simulationData.floorData[floor] = {\n        originalPeople: peoplePerFloor[floor] || 0,\n        remainingPeople: peoplePerFloor[floor] || 0,\n        evacuationStartTime: floor * stairsData[0].floorEvacuationDelay, // Vereenvoudigde benadering\n        evacuationDelay: stairsData[0].floorEvacuationDelay\n      };\n    });\n    \n    stairs.forEach(stair => {\n      simulationData.stairData[stair.id] = {\n        flowCapacity: calculateStairFlowCapacity(stair),\n        exitCapacity: stair.exitDoorWidth * floorExitFlowRate,\n        peopleOnStair: 0,\n        totalEvacuated: 0,\n        peoplePerFloor: {}\n      };\n      \n      // Initialiseer het aantal personen per verdieping voor elke trap\n      floors.forEach(floor => {\n        simulationData.stairData[stair.id].peoplePerFloor[floor] = 0;\n      });\n    });\n    \n    // Run de simulatie voor elke tijdstap\n    for (let step = 0; step <= totalTimeSteps; step++) {\n      const currentTime = step * timeStep; // Huidige tijd in seconden\n      \n      // Datastructuur voor deze tijdstap\n      const timeStepData = {\n        step,\n        time: currentTime,\n        timeMinutes: currentTime / 60,\n        stairData: {},\n        floorData: {},\n        totalEvacuated: 0,\n        remainingInBuilding: totalPeople\n      };\n      \n      // Update elke trap voor deze tijdstap\n      stairs.forEach(stair => {\n        const stairId = stair.id;\n        const stairState = simulationData.stairData[stairId];\n        \n        // Hoeveel mensen kunnen de trap verlaten in deze tijdstap\n        const exitCapacityThisStep = (stairState.exitCapacity / 60) * timeStep;\n        let exitingThisStep = Math.min(stairState.peopleOnStair, exitCapacityThisStep);\n        \n        // Update het aantal geëvacueerde personen\n        stairState.totalEvacuated += exitingThisStep;\n        stairState.peopleOnStair -= exitingThisStep;\n        \n        // Update elke verdieping voor deze trap\n        floors.forEach(floor => {\n          // Is de evacuatie al begonnen op deze verdieping?\n          const floorState = simulationData.floorData[floor];\n          \n          if (currentTime >= floorState.evacuationStartTime && floorState.remainingPeople > 0) {\n            // Bereken hoeveel mensen de verdieping kunnen verlaten naar deze trap\n            const exitCapacity = calculateFloorExitCapacity(stair, floor);\n            const exitCapacityThisStep = (exitCapacity / 60) * timeStep;\n            \n            // Hoeveel mensen gaan proberen de verdieping te verlaten?\n            const attemptingToExit = Math.min(floorState.remainingPeople, exitCapacityThisStep);\n            \n            // Hoe vol is de trap al? (vereenvoudigde controle op opvangcapaciteit)\n            const stairFillFactor = stairState.peopleOnStair / stair.receiveCapacity;\n            const flowReduction = Math.max(0, 1 - stairFillFactor);\n            \n            // Uiteindelijk aantal dat daadwerkelijk de trap op gaat\n            const actuallyExiting = attemptingToExit * flowReduction;\n            \n            // Update de status\n            floorState.remainingPeople -= actuallyExiting;\n            stairState.peopleOnStair += actuallyExiting;\n            stairState.peoplePerFloor[floor] += actuallyExiting;\n          }\n        });\n        \n        // Update de gegenereerde data voor deze tijdstap\n        timeStepData.stairData[stairId] = {\n          peopleOnStair: stairState.peopleOnStair,\n          totalEvacuated: stairState.totalEvacuated,\n          peoplePerFloor: {...stairState.peoplePerFloor}\n        };\n        \n        timeStepData.totalEvacuated += stairState.totalEvacuated;\n      });\n      \n      // Update de vloerdata\n      floors.forEach(floor => {\n        timeStepData.floorData[floor] = {\n          remainingPeople: simulationData.floorData[floor].remainingPeople\n        };\n      });\n      \n      // Bereken hoeveel mensen er nog in het gebouw zijn\n      timeStepData.remainingInBuilding = totalPeople - timeStepData.totalEvacuated;\n      \n      // Voeg deze tijdstap toe aan de simulatie\n      simulationData.timeSteps.push(timeStepData);\n      \n      // Als iedereen is geëvacueerd, stoppen we de simulatie\n      if (timeStepData.remainingInBuilding <= 0) {\n        break;\n      }\n    }\n    \n    // Bereken de totale evacuatietijd (de tijd waarop de laatste persoon het gebouw verlaat)\n    const evacuationTimeStep = simulationData.timeSteps.find(step => \n      step.remainingInBuilding <= 0 || step.totalEvacuated >= totalPeople * 0.99 // 99% als benadering\n    );\n    \n    const calculatedEvacuationTime = evacuationTimeStep ? \n      evacuationTimeStep.timeMinutes : \n      simulationData.timeSteps[simulationData.timeSteps.length - 1].timeMinutes;\n    \n    setTotalEvacuationTime(calculatedEvacuationTime);\n    \n    // Bereken totale doorstroomcapaciteit van alle trappen\n    const totalStairCapacity = stairs.reduce((sum, stair) => {\n      return sum + calculateStairFlowCapacity(stair);\n    }, 0);\n    \n    // Bereken totale uitgangsdeuren capaciteit\n    const totalExitDoorCapacity = stairs.reduce((sum, stair) => {\n      return sum + (stair.exitDoorWidth * floorExitFlowRate);\n    }, 0);\n    \n    // Prepareer data voor de grafieken\n    const timeSeriesData = simulationData.timeSteps.filter((_, index) => \n      // Filter alleen een subset van punten voor de grafiek als er te veel zijn\n      index % Math.max(1, Math.floor(simulationData.timeSteps.length / 40)) === 0\n    ).map(step => {\n      const dataPoint = { \n        timeStep: step.step,\n        time: (step.timeMinutes).toFixed(1)\n      };\n      \n      // Personen per trap\n      stairs.forEach(stair => {\n        dataPoint[`stair${stair.id}`] = Math.round(step.stairData[stair.id].totalEvacuated);\n      });\n      \n      // Totale evacuatie\n      dataPoint.total = Math.round(step.totalEvacuated);\n      \n      return dataPoint;\n    });\n    \n    // Genereer data per verdieping voor visualisatie\n    const floorData = floors.map(floor => ({\n      floor,\n      people: peoplePerFloor[floor] || 0,\n      evacuationStartTime: (simulationData.floorData[floor].evacuationStartTime / 60).toFixed(1),\n      remainingAtEnd: Math.round(\n        simulationData.timeSteps[simulationData.timeSteps.length - 1].floorData[floor].remainingPeople\n      )\n    }));\n    \n    // Bereken kritieke looppaden en -tijden\n    const criticalPaths = [];\n    floors.forEach(floor => {\n      let slowestPathTime = 0;\n      let slowestStair = null;\n      \n      stairs.forEach(stair => {\n        // Tijd om de trap te bereiken\n        const travelTime = calculateTravelTime(stair, floor);\n        \n        // Tijd om de trap af te dalen naar de uitgang\n        const descentTime = calculateStairDescentTime(stair, floor, lowestFloor);\n        \n        // Totale tijd\n        const totalPathTime = travelTime + descentTime;\n        \n        if (totalPathTime > slowestPathTime) {\n          slowestPathTime = totalPathTime;\n          slowestStair = stair;\n        }\n      });\n      \n      if (slowestStair) {\n        criticalPaths.push({\n          floor,\n          stair: slowestStair.name,\n          travelTime: calculateTravelTime(slowestStair, floor),\n          descentTime: calculateStairDescentTime(slowestStair, floor, lowestFloor),\n          totalTime: slowestPathTime\n        });\n      }\n    });\n    \n    // Stel resultaten in voor weergave\n    setCalculationResults({\n      timeSeriesData,\n      floorData,\n      totalPeople,\n      stairCapacity: Math.round(totalStairCapacity),\n      totalHeight,\n      exitDoorCapacity: Math.round(totalExitDoorCapacity),\n      criticalPaths,\n      detailedTimeSteps: simulationData.timeSteps\n    });\n    \n    setShowResults(true);\n  };\n  \n  // Reset de berekening en ga terug naar het invoerscherm\n  const resetCalculation = () => {\n    setShowResults(false);\n    setCalculationResults(null);\n  };\n  \n  return (\n    <div className=\"p-6 max-w-6xl mx-auto bg-white\">\n      <h1 className=\"text-2xl font-bold mb-6 text-blue-800\">BBL Gebouwevacuatie Rekentool</h1>\n      \n      {!showResults ? (\n        <div className=\"space-y-6\">\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Gebouwparameters</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Aantal trappen</label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={numberOfStairs}\n                  onChange={(e) => setNumberOfStairs(parseInt(e.target.value))}\n                  className=\"w-full p-2 border rounded\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Aantal bouwlagen</label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"100\"\n                  value={numberOfFloors}\n                  onChange={(e) => setNumberOfFloors(parseInt(e.target.value))}\n                  className=\"w-full p-2 border rounded\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Laagste verdieping</label>\n                <input\n                  type=\"number\"\n                  min=\"-10\"\n                  max=\"0\"\n                  value={lowestFloor}\n                  onChange={(e) => setLowestFloor(parseInt(e.target.value))}\n                  className=\"w-full p-2 border rounded\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Voorportalen aanwezig</label>\n                <select\n                  value={hasVestibules ? \"true\" : \"false\"}\n                  onChange={(e) => setHasVestibules(e.target.value === \"true\")}\n                  className=\"w-full p-2 border rounded\"\n                >\n                  <option value=\"true\">Ja</option>\n                  <option value=\"false\">Nee</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Verdiepingshoogte (m)</label>\n                <input\n                  type=\"number\"\n                  min=\"2\"\n                  max=\"6\"\n                  step=\"0.1\"\n                  value={floorsHeight}\n                  onChange={(e) => setFloorsHeight(parseFloat(e.target.value))}\n                  className=\"w-full p-2 border rounded\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Maximale ontruimingstijd (min)</label>\n                <select\n                  value={evacuationTimeMinutes}\n                  onChange={(e) => setEvacuationTimeMinutes(parseInt(e.target.value))}\n                  className=\"w-full p-2 border rounded\"\n                >\n                  <option value=\"15\">15 minuten</option>\n                  <option value=\"20\">20 minuten</option>\n                  <option value=\"30\">30 minuten</option>\n                  <option value=\"38\">38 minuten</option>\n                  <option value=\"76\">76 minuten</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"mt-4\">\n              <button \n                onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}\n                className=\"text-blue-700 underline\"\n              >\n                {showAdvancedSettings ? \"Verberg geavanceerde instellingen\" : \"Toon geavanceerde instellingen\"}\n              </button>\n              \n              {showAdvancedSettings && (\n                <div className=\"mt-3 grid grid-cols-1 md:grid-cols-2 gap-4 p-3 bg-blue-100 rounded\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Doorstroomcapaciteit verdieping (pers/min/m)</label>\n                    <input\n                      type=\"number\"\n                      min=\"20\"\n                      max=\"100\"\n                      step=\"1\"\n                      value={floorExitFlowRate}\n                      onChange={(e) => setFloorExitFlowRate(parseFloat(e.target.value))}\n                      className=\"w-full p-2 border rounded\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Doorstroomcapaciteit trap (pers/min/m)</label>\n                    <input\n                      type=\"number\"\n                      min=\"20\"\n                      max=\"100\"\n                      step=\"1\"\n                      value={stairFlowRate}\n                      onChange={(e) => setStairFlowRate(parseFloat(e.target.value))}\n                      className=\"w-full p-2 border rounded\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Reductiefactor voorportaal</label>\n                    <input\n                      type=\"number\"\n                      min=\"0.1\"\n                      max=\"1\"\n                      step=\"0.05\"\n                      value={vestibuleFlowReduction}\n                      onChange={(e) => setVestibuleFlowReduction(parseFloat(e.target.value))}\n                      className=\"w-full p-2 border rounded\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Tijdstap simulatie (sec)</label>\n                    <input\n                      type=\"number\"\n                      min=\"5\"\n                      max=\"60\"\n                      step=\"5\"\n                      value={timeStepSize}\n                      onChange={(e) => setTimeStepSize(parseInt(e.target.value))}\n                      className=\"w-full p-2 border rounded\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Trapspecificaties</h2>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"bg-blue-100\">\n                    <th className=\"p-2 text-left\">Trap</th>\n                    <th className=\"p-2 text-left\">Breedte (m)</th>\n                    <th className=\"p-2 text-left\">Vrije breedte (m)</th>\n                    <th className=\"p-2 text-left\">Bordessen</th>\n                    <th className=\"p-2 text-left\">Bordessen per verdieping</th>\n                    <th className=\"p-2 text-left\">Bordesgrootte (m)</th>\n                    <th className=\"p-2 text-left\">Doorstroomcap. (pers/min/m)</th>\n                    <th className=\"p-2 text-left\">Uitgang breedte (m)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {stairsData.map(stair => (\n                    <tr key={stair.id} className=\"border-b\">\n                      <td className=\"p-2\">{stair.name}</td>\n                      <td className=\"p-2\">\n                        <input\n                          type=\"number\"\n                          min=\"0.8\"\n                          max=\"3\"\n                          step=\"0.1\"\n                          value={stair.width}\n                          onChange={(e) => handleStairDataChange(stair.id, 'width', e.target.value)}\n                          className=\"w-20 p-1 border rounded\"\n                        />\n                      </td>\n                      <td className=\"p-2\">\n                        <input\n                          type=\"number\"\n                          min=\"0.6\"\n                          max=\"3\"\n                          step=\"0.1\"\n                          value={stair.freeWidth}\n                          onChange={(e) => handleStairDataChange(stair.id, 'freeWidth', e.target.value)}\n                          className=\"w-20 p-1 border rounded\"\n                        />\n                      </td>\n                      <td className=\"p-2\">\n                        <select\n                          value={stair.hasLandings.toString()}\n                          onChange={(e) => handleStairDataChange(stair.id, 'hasLandings', e.target.value)}\n                          className=\"p-1 border rounded\"\n                        >\n                          <option value=\"true\">Ja</option>\n                          <option value=\"false\">Nee</option>\n                        </select>\n                      </td>\n                      <td className=\"p-2\">\n                        <input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"4\"\n                          step=\"1\"\n                          disabled={!stair.hasLandings}\n                          value={stair.landingsPerFloor}\n                          onChange={(e) => handleStairDataChange(stair.id, 'landingsPerFloor', e.target.value)}\n                          className=\"w-20 p-1 border rounded\"\n                        />\n                      </td>\n                      <td className=\"p-2\">\n                        <input\n                          type=\"number\"\n                          min=\"0.5\"\n                          max=\"3\"\n                          step=\"0.1\"\n                          disabled={!stair.hasLandings}\n                          value={stair.landingSize}\n                          onChange={(e) => handleStairDataChange(stair.id, 'landingSize', e.target.value)}\n                          className=\"w-20 p-1 border rounded\"\n                        />\n                      </td>\n                      <td className=\"p-2\">\n                        <input\n                          type=\"number\"\n                          min=\"20\"\n                          max=\"100\"\n                          step=\"1\"\n                          value={stair.flowCapacity}\n                          onChange={(e) => handleStairDataChange(stair.id, 'flowCapacity', e.target.value)}\n                          className=\"w-20 p-1 border rounded\"\n                        />\n                      </td>\n                      <td className=\"p-2\">\n                        <input\n                          type=\"number\"\n                          min=\"0.6\"\n                          max=\"2.5\"\n                          step=\"0.05\"\n                          value={stair.exitDoorWidth}\n                          onChange={(e) => handleStairDataChange(stair.id, 'exitDoorWidth', e.target.value)}\n                          className=\"w-20 p-1 border rounded\"\n                        />\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            \n            {showAdvancedSettings && (\n              <div className=\"mt-4\">\n                <h3 className=\"font-medium text-sm mb-2\">Extra Trapparameters</h3>\n                {stairsData.map(stair => (\n                  <div key={`adv-${stair.id}`} className=\"mb-4 p-3 bg-blue-100 rounded\">\n                    <h4 className=\"font-medium mb-2\">Trap {stair.name} - Geavanceerde instellingen</h4>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n                      <div>\n                        <label className=\"block text-xs mb-1\">Voorportaal aanwezig</label>\n                        <select\n                          value={stair.hasVestibule.toString()}\n                          onChange={(e) => handleStairDataChange(stair.id, 'hasVestibule', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        >\n                          <option value=\"true\">Ja</option>\n                          <option value=\"false\">Nee</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Voorportaaldiepte (m)</label>\n                        <input\n                          type=\"number\"\n                          min=\"0.5\"\n                          max=\"3\"\n                          step=\"0.1\"\n                          disabled={!stair.hasVestibule}\n                          value={stair.vestibuleDepth}\n                          onChange={(e) => handleStairDataChange(stair.id, 'vestibuleDepth', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Voorportaaldeur breedte (m)</label>\n                        <input\n                          type=\"number\"\n                          min=\"0.6\"\n                          max=\"2.5\"\n                          step=\"0.05\"\n                          disabled={!stair.hasVestibule}\n                          value={stair.vestibuleDoorWidth}\n                          onChange={(e) => handleStairDataChange(stair.id, 'vestibuleDoorWidth', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Weerstandsfactor</label>\n                        <input\n                          type=\"number\"\n                          min=\"0.5\"\n                          max=\"1.5\"\n                          step=\"0.05\"\n                          value={stair.resistance}\n                          onChange={(e) => handleStairDataChange(stair.id, 'resistance', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Loopafstand naar trap (m)</label>\n                        <input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"100\"\n                          step=\"1\"\n                          value={stair.travelDistanceFloor}\n                          onChange={(e) => handleStairDataChange(stair.id, 'travelDistanceFloor', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Loopsnelheid (m/s)</label>\n                        <input\n                          type=\"number\"\n                          min=\"0.5\"\n                          max=\"2.5\"\n                          step=\"0.1\"\n                          value={stair.travelSpeed}\n                          onChange={(e) => handleStairDataChange(stair.id, 'travelSpeed', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Vertraging voor verdieping (s)</label>\n                        <input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"300\"\n                          step=\"15\"\n                          value={stair.floorEvacuationDelay}\n                          onChange={(e) => handleStairDataChange(stair.id, 'floorEvacuationDelay', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Capaciteitsreductie</label>\n                        <input\n                          type=\"number\"\n                          min=\"0.1\"\n                          max=\"1\"\n                          step=\"0.05\"\n                          value={stair.capacityReduction}\n                          onChange={(e) => handleStairDataChange(stair.id, 'capacityReduction', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs mb-1\">Opvangcapaciteit (pers)</label>\n                        <input\n                          type=\"number\"\n                          min=\"10\"\n                          max=\"500\"\n                          step=\"10\"\n                          value={stair.receiveCapacity}\n                          onChange={(e) => handleStairDataChange(stair.id, 'receiveCapacity', e.target.value)}\n                          className=\"w-full p-1 border rounded text-sm\"\n                        />\n                      </div>\n                    </div>\n                    \n                    {floors.length > 0 && (\n                      <div className=\"mt-3\">\n                        <h5 className=\"text-xs font-medium mb-1\">Specifieke loopafstanden per verdieping (m)</h5>\n                        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2\">\n                          {floors.map(floor => (\n                            <div key={`dist-${stair.id}-${floor}`}>\n                              <label className=\"block text-xs mb-1\">Verd. {floor}</label>\n                              <input\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"100\"\n                                step=\"1\"\n                                value={stair.specificTravelDistances[floor] || stair.travelDistanceFloor}\n                                onChange={(e) => handleStairDataChange(stair.id, `travelDistance_${floor}`, e.target.value)}\n                                className=\"w-full p-1 border rounded text-xs\"\n                              />\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Personen per verdieping</h2>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n              {floors.map(floor => (\n                <div key={floor}>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Verdieping {floor}\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    value={peoplePerFloor[floor] || 0}\n                    onChange={(e) => handlePeopleChange(floor, e.target.value)}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center\">\n            <button \n              onClick={calculateEvacuation}\n              className=\"px-6 py-2 bg-blue-600 text-white font-medium rounded hover:bg-blue-700\"\n            >\n              Berekenen\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"space-y-8\">\n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Berekeningsresultaten</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n              <div className=\"p-3 bg-white rounded shadow\">\n                <p className=\"font-medium\">Totaal aantal personen: {calculationResults.totalPeople}</p>\n              </div>\n              <div className=\"p-3 bg-white rounded shadow\">\n                <p className=\"font-medium\">Totaal aantal trappen: {numberOfStairs}</p>\n              </div>\n              <div className=\"p-3 bg-white rounded shadow\">\n                <p className=\"font-medium\">Gebouwhoogte: {calculationResults.totalHeight.toFixed(1)} m</p>\n              </div>\n              <div className=\"p-3 bg-white rounded shadow\">\n                <p className=\"font-medium\">Trapdoorstroomcapaciteit: {calculationResults.stairCapacity} pers/min</p>\n              </div>\n              <div className=\"p-3 bg-white rounded shadow\">\n                <p className=\"font-medium\">Uitgangscapaciteit: {calculationResults.exitDoorCapacity} pers/min</p>\n              </div>\n              <div className=\"p-3 bg-white rounded shadow\">\n                <p className=\"font-medium\">Ontruimingstijd: {totalEvacuationTime.toFixed(2)} minuten</p>\n                {totalEvacuationTime > evacuationTimeMinutes && (\n                  <p className=\"text-red-600 text-sm\">Overschrijdt max. tijd van {evacuationTimeMinutes} min.</p>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Ontruimingsvoortgang</h2>\n            <div className=\"h-72 w-full\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                  data={calculationResults.timeSeriesData}\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"time\" \n                    label={{ value: 'Tijd (minuten)', position: 'insideBottomRight', offset: -5 }} \n                  />\n                  <YAxis \n                    label={{ value: 'Aantal geëvacueerde personen', angle: -90, position: 'insideLeft' }} \n                  />\n                  <Tooltip />\n                  <Legend />\n                  {stairsData.map(stair => (\n                    <Line\n                      key={`stair${stair.id}`}\n                      type=\"monotone\"\n                      dataKey={`stair${stair.id}`}\n                      name={`Trap ${stair.name}`}\n                      stroke={`hsl(${((stair.id-1) * 120) % 360}, 70%, 50%)`}\n                      strokeWidth={2}\n                    />\n                  ))}\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"total\"\n                    name=\"Totale evacuatie\"\n                    stroke=\"#000\"\n                    strokeWidth={3}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n          \n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Kritieke evacuatiepaden</h2>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"bg-blue-100\">\n                    <th className=\"p-2 text-left\">Verdieping</th>\n                    <th className=\"p-2 text-left\">Kritieke trap</th>\n                    <th className=\"p-2 text-right\">Looptijd (sec)</th>\n                    <th className=\"p-2 text-right\">Afdaaltijd (sec)</th>\n                    <th className=\"p-2 text-right\">Totale tijd (sec)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {calculationResults.criticalPaths.map((path, index) => (\n                    <tr key={`path-${index}`} className=\"border-b\">\n                      <td className=\"p-2\">{path.floor}</td>\n                      <td className=\"p-2\">{path.stair}</td>\n                      <td className=\"p-2 text-right\">{path.travelTime.toFixed(1)}</td>\n                      <td className=\"p-2 text-right\">{path.descentTime.toFixed(1)}</td>\n                      <td className=\"p-2 text-right font-medium\">{path.totalTime.toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n          \n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Personen per verdieping</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"h-72\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={calculationResults.floorData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    layout=\"vertical\"\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis type=\"number\" />\n                    <YAxis \n                      dataKey=\"floor\" \n                      type=\"category\" \n                      label={{ value: 'Verdieping', angle: -90, position: 'insideLeft' }} \n                    />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"people\" name=\"Personen per verdieping\" fill=\"#8884d8\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"overflow-y-auto h-72\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"bg-blue-100 sticky top-0\">\n                      <th className=\"p-2 text-left\">Verdieping</th>\n                      <th className=\"p-2 text-right\">Aantal personen</th>\n                      <th className=\"p-2 text-right\">Start evacuatie (min)</th>\n                      <th className=\"p-2 text-right\">Resterend einde (pers)</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {calculationResults.floorData.map((floor, index) => (\n                      <tr key={`floor-${index}`} className=\"border-b\">\n                        <td className=\"p-2\">{floor.floor}</td>\n                        <td className=\"p-2 text-right\">{floor.people}</td>\n                        <td className=\"p-2 text-right\">{floor.evacuationStartTime}</td>\n                        <td className=\"p-2 text-right\">{floor.remainingAtEnd}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center space-x-4\">\n            <button \n              onClick={resetCalculation}\n              className=\"px-6 py-2 bg-gray-600 text-white font-medium rounded hover:bg-gray-700\"\n            >\n              Terug naar invoer\n            </button>\n            <button \n              className=\"px-6 py-2 bg-blue-600 text-white font-medium rounded hover:bg-blue-700\"\n              onClick={() => window.print()}\n            >\n              Resultaten exporteren\n            </button>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"mt-8 pt-4 border-t text-sm text-gray-600\">\n        <p>Deze rekentool is gebaseerd op de eisen van het Besluit bouwwerken en leefomgeving (BBL) voor gebouwontruiming.</p>\n        <p>Referentie: Artikelen <a href=\"https://wetten.overheid.nl/jci1.3:c:BWBR0041297&hoofdstuk=4&afdeling=4.2&paragraaf=4.2.11&artikel=4.80&z=2025-01-01&g=2025-01-01\" target=\"_blank\" className=\"text-blue-600 hover:underline\">4.80</a> en <a href=\"https://wetten.overheid.nl/jci1.3:c:BWBR0041297&hoofdstuk=4&afdeling=4.2&paragraaf=4.2.11&artikel=4.81&z=2025-01-01&g=2025-01-01\" target=\"_blank\" className=\"text-blue-600 hover:underline\">4.81</a> van het BBL.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default EvacuationCalculator;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}